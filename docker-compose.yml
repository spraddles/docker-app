version: "3.3"

services:

    # # # # # # # # #
    #  Container 1  #
    # # # # # # # # #

    # name of domain (i.e. 'http://application')
    application:
        # name of the container
        # important for redeploying same container so Docker doesn't auto create a dynamic container name
        container_name:
            "my-application"
        ports:
            - "${DOCKER_APP_PORTS}"
        build:
            # '.' means biuild in current DIR
            context: .
            dockerfile: ./dockerfile-app
        # mounting volume makes this persistant
        volumes:
            - .:/docker-app
        # requires database to be setup first before app runs
        depends_on:
            database:
                # relies on 'healthcheck' below
                condition: service_healthy
        # Docker recommends that you use restart policies
        # ref: https://docs.docker.com/config/containers/start-containers-automatically/
        # environment variables
        environment:
            NODE_APP_ENV: "${NODE_APP_ENV}"
            DOCKER_APP_PORTS: "${DOCKER_APP_PORTS}"
        restart: 
            always

    # # # # # # # # #
    #  Container 2  #
    # # # # # # # # #

    database:
        container_name:
            "my-database"
        image:
            postgres:12.6
        ports:
            - "5432:5432"
        volumes:
            - postgres-data:/var/lib/postgresql/data
        # check that DB is ready
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        environment:
            POSTGRES_DB: "${DB_NAME}"
            POSTGRES_USER: "${DB_USER}"
            POSTGRES_PASSWORD: "${DB_PASSWORD}"
            #POSTGRES_HOST_AUTH_METHOD: "trust"
        restart:
            always

# below applies to all services / containers
volumes:
    postgres-data: